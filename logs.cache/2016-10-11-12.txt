11.10 12:15:28 TIMER: Starting timer...
11.10 12:15:28 TIMER: Timer running...
11.10 12:15:28 DB: SELECT * FROM GameVars
11.10 12:15:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:15:28 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:15:28 DB: SELECT * FROM Shops WHERE ID = 1
11.10 12:15:28 TEMP: load ./tmp/quest_daily_ids
11.10 12:15:28 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
11.10 12:15:28 TEMP: save ./tmp/quest_daily_ids
11.10 12:15:28 NET: ??? request core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:15:28 QUEUE: ball.0 (thread) response server.login
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM LocalizationStrings
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 10.6 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM GameVars
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 0.83 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 1.31 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 1.19 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 0.93 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 1.74 ms
11.10 12:15:28 NET: ball.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:15:28 QUEUE: ball.0 (thread) response core/quest.getDaily
11.10 12:15:28 TIME: core/quest.getDaily : 0.04 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM UserAttributeTypes
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 0.51 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:15:28 DB: SELECT * FROM UserVariableTypes
11.10 12:15:28 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:28 TIME: core/server.query : 0.7 ms
11.10 12:15:28 NET: ball.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:15:28 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Not11.10 12:15:39 TIMER: Starting timer...
11.10 12:15:39 TIMER: Timer running...
11.10 12:15:39 DB: SELECT * FROM GameVars
11.10 12:15:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:15:39 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:15:39 DB: SELECT * FROM Shops WHERE ID = 1
11.10 12:15:39 TEMP: load ./tmp/quest_daily_ids
11.10 12:15:39 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
11.10 12:15:39 TEMP: save ./tmp/quest_daily_ids
11.10 12:15:39 NET: ??? request core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:15:39 QUEUE: ball.0 (thread) response server.login
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM LocalizationStrings
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 8.85 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM GameVars
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 1.02 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 1.6 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 0.85 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 0.81 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 1.24 ms
11.10 12:15:39 NET: ball.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:15:39 QUEUE: ball.0 (thread) response core/quest.getDaily
11.10 12:15:39 TIME: core/quest.getDaily : 0.03 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM UserAttributeTypes
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 0.5 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:15:39 DB: SELECT * FROM UserVariableTypes
11.10 12:15:39 QUEUE: ball.0 (thread) response core/server.query
11.10 12:15:39 TIME: core/server.query : 0.55 ms
11.10 12:15:39 NET: ball.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:15:39 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note11.10 12:19:36 TIMER: Starting timer...
11.10 12:19:36 TIMER: Timer running...
11.10 12:19:36 DB: SELECT * FROM GameVars
11.10 12:19:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:19:36 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:19:36 DB: SELECT * FROM Shops WHERE ID = 1
11.10 12:19:36 TEMP: load ./tmp/quest_daily_ids
11.10 12:19:36 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
11.10 12:19:36 TEMP: save ./tmp/quest_daily_ids
11.10 12:19:36 NET: ??? request core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:19:36 QUEUE: ball.0 (thread) response server.login
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM LocalizationStrings
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 10.71 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM GameVars
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 0.86 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 1.11 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 0.69 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 1.22 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 1.48 ms
11.10 12:19:36 NET: ball.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:19:36 QUEUE: ball.0 (thread) response core/quest.getDaily
11.10 12:19:36 TIME: core/quest.getDaily : 0.03 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM UserAttributeTypes
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 0.65 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:19:36 DB: SELECT * FROM UserVariableTypes
11.10 12:19:36 QUEUE: ball.0 (thread) response core/server.query
11.10 12:19:36 TIME: core/server.query : 0.71 ms
11.10 12:19:36 NET: ball.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:19:36 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.N11.10 12:20:29 TIMER: Starting timer...
11.10 12:20:29 TIMER: Timer running...
11.10 12:20:29 DB: SELECT * FROM GameVars
11.10 12:20:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd + '1day'::interval) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:20:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:20:29 DB: SELECT * FROM Shops WHERE ID = 1
11.10 12:20:29 TEMP: load ./tmp/quest_daily_ids
11.10 12:20:29 DB: SELECT ID FROM QuestChains WHERE IsEnabled = 't' AND Params LIKE '%"isDaily":true%' ORDER BY ID
11.10 12:20:29 TEMP: save ./tmp/quest_daily_ids
11.10 12:20:29 NET: ??? request core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:20:29 QUEUE: ball.0 (thread) response server.login
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM LocalizationStrings
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 8.62 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM GameVars
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.9 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.66 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.51 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.62 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 1.83 ms
11.10 12:20:29 NET: ball.0 (thread) request core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:20:29 QUEUE: ball.0 (thread) response core/quest.getDaily
11.10 12:20:29 TIME: core/quest.getDaily : 0.09 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM UserAttributeTypes
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 2.29 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM UserVariableTypes
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.54 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:20:29 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 1.4 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM ItemGroups
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.51 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM Bundles ORDER BY ID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.52 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.84 ms
11.10 12:20:29 NET: ball.0 (thread) request core/shop.getList { _type => core/shop.getList }
11.10 12:20:29 QUEUE: ball.0 (thread) response core/shop.getList
11.10 12:20:29 TIME: core/shop.getList : 0.04 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM EffectAttributeTypes
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.63 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM Effects
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.54 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 12:20:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 1.15 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 12:20:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.57 ms
11.10 12:20:29 NET: ball.0 (thread) request core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 12:20:29 DB: SELECT * FROM Badges
11.10 12:20:29 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:29 TIME: core/server.query : 0.35 ms
11.10 12:20:35 NET: ball.0 (thread) request core/server.query { q => SELECT ID FROM Users WHERE Name = E'test8', _type => core/server.query }
11.10 12:20:35 DB: SELECT ID FROM Users WHERE Name = E'test8'
11.10 12:20:35 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:35 TIME: core/server.query : 1.52 ms
11.10 12:20:35 NET: ball.0 (thread) request core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
11.10 12:20:35 DB: SELECT nextval('Users_id_seq') AS id
11.10 12:20:35 QUEUE: ball.0 (thread) response core/server.query
11.10 12:20:35 TIME: core/server.query : 15.26 ms
11.10 12:20:35 NET: ball.0 (thread) request core/user.register { password => test, name => test8, fullParams => { password => test, name => test8, networkid => , params => {obj: 1}, networktype => , messageType => user.register, id => 3 }, networkid => , connectionID => 84651052, networktype => , email => , id => 3, _type => core/user.register }
11.10 12:20:35 QUEUE: ball.0 (thread) response core/user.register
11.10 12:20:35 TIME: core/user.register : 0.03 ms
11.10 12:20:35 ASYNCDB: INSERT INTO Users (ID, Name, NetworkID, NetworkType, Password, Email, RegDate) VALUES (3,E'test8',E'',E'',E'test',E'', now())
11.10 12:20:35 ASYNCDB: INSERT INTO UserRatings (UserID, Points) VALUES (3, 0)
11.10 12:20:35 READDB: SELECT * FROM Users WHERE ID = 3
11.10 12:20:35 READDB: SELECT * FROM Users WHERE ID = 1
11.10 12:20:35 READDB: SELECT ID FROM UserQuests WHERE ID = 3
11.10 12:20:35 READDB: INSERT INTO UserQuests (ID) VALUES (3)
11.10 12:20:35 QUEUE: ball.0 (thread) response core/user.registerResponse
11.10 12:20:41 WRITEDB: UPDATE Users SET name = E'test8', deleted = E'false', email = E'', networktype = E'  ', password = E'test', isbanned = E'false', regdate = E'2016-10-11 12:20:35.445522+03', language = E'  ', networkid = E'', params = E'{"inventory":{"list":[]},"vars":{},"attrs":{},"effects":{"list":[]}}' WHERE ID = 3
11.10 12:20:45 BLOCKREMOVE: user 1 removed
11.10 12:20:51 BLOCKREMOVE: user 3 removed
