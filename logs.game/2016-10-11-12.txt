11.10 12:15:28 ->>-: core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:15:28 -<<-: server.login ok
11.10 12:15:28 DB: SELECT * FROM LocalizationStrings
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 TIMER: Starting timer...
11.10 12:15:28 TIMER: Timer running...
11.10 12:15:28 DB: SELECT * FROM GameVars
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:15:28 -<<-: core/quest.getDaily ok
11.10 12:15:28 DB: SELECT * FROM UserAttributeTypes
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM UserVariableTypes
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 12:15:28 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM ItemGroups
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM Bundles ORDER BY ID
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 SHOP: loading items...
11.10 12:15:28 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 12:15:28 -<<-: core/shop.getList ok
11.10 12:15:28 SHOP: 0 items loaded (0 sec)
11.10 12:15:28 DB: SELECT * FROM EffectAttributeTypes
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT * FROM Effects
11.10 12:15:28 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 12:15:28 -<<-: core/server.query ok
11.10 12:15:28 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoc11.10 12:15:39 ->>-: core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:15:39 -<<-: server.login ok
11.10 12:15:39 DB: SELECT * FROM LocalizationStrings
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 TIMER: Starting timer...
11.10 12:15:39 DB: SELECT * FROM GameVars
11.10 12:15:39 TIMER: Timer running...
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:15:39 -<<-: core/quest.getDaily ok
11.10 12:15:39 DB: SELECT * FROM UserAttributeTypes
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM UserVariableTypes
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 12:15:39 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM ItemGroups
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM Bundles ORDER BY ID
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 SHOP: loading items...
11.10 12:15:39 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 12:15:39 -<<-: core/shop.getList ok
11.10 12:15:39 SHOP: 0 items loaded (0 sec)
11.10 12:15:39 DB: SELECT * FROM EffectAttributeTypes
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM Effects
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:15:39 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:15:39 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:39 DB: SELECT * FROM Badges
11.10 12:15:39 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 12:15:39 -<<-: core/server.query ok
11.10 12:15:42 NET: Client (conid:78000208) connected to ball.0 (clients:1)
11.10 12:15:43 ++ NET: null req: user.register { password => test, name => , params => {obj: 1}, messageType => user.register }
11.10 12:16:39 TIMER: Check auto-disconnect...
11.10 12:16:39 STATS: ball.0 cache, locks:0
11.10 12:16:50 NET: Client (name:null conid:78000208 TCP) disconnected from ball.0 (clients:0)
11.10 12:19:36 ->>-: core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:19:36 -<<-: server.login ok
11.10 12:19:36 DB: SELECT * FROM LocalizationStrings
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 TIMER: Starting timer...
11.10 12:19:36 TIMER: Timer running...
11.10 12:19:36 DB: SELECT * FROM GameVars
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:19:36 -<<-: core/quest.getDaily ok
11.10 12:19:36 DB: SELECT * FROM UserAttributeTypes
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM UserVariableTypes
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 12:19:36 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM ItemGroups
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM Bundles ORDER BY ID
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 SHOP: loading items...
11.10 12:19:36 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 12:19:36 -<<-: core/shop.getList ok
11.10 12:19:36 SHOP: 0 items loaded (0 sec)
11.10 12:19:36 DB: SELECT * FROM EffectAttributeTypes
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM Effects
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:19:36 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:19:36 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:19:36 DB: SELECT * FROM Badges
11.10 12:19:36 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 12:19:36 -<<-: core/server.query ok
11.10 12:20:29 ->>-: core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 12:20:29 -<<-: server.login ok
11.10 12:20:29 DB: SELECT * FROM LocalizationStrings
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 TIMER: Starting timer...
11.10 12:20:29 TIMER: Timer running...
11.10 12:20:29 DB: SELECT * FROM GameVars
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 12:20:29 -<<-: core/quest.getDaily ok
11.10 12:20:29 DB: SELECT * FROM UserAttributeTypes
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM UserVariableTypes
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 12:20:29 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM ItemGroups
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM Bundles ORDER BY ID
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 SHOP: loading items...
11.10 12:20:29 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 12:20:29 -<<-: core/shop.getList ok
11.10 12:20:29 SHOP: 0 items loaded (0.001 sec)
11.10 12:20:29 DB: SELECT * FROM EffectAttributeTypes
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM Effects
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 12:20:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 12:20:29 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:29 DB: SELECT * FROM Badges
11.10 12:20:29 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 12:20:29 -<<-: core/server.query ok
11.10 12:20:35 NET: Client (conid:84651052) connected to ball.0 (clients:1)
11.10 12:20:35 ++ NET: null req: user.register { password => test, name => , params => {obj: 1}, messageType => user.register }
11.10 12:20:35 DB: SELECT ID FROM Users WHERE Name = E'test8'
11.10 12:20:35 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test8', _type => core/server.query }
11.10 12:20:35 -<<-: core/server.query ok
11.10 12:20:35 DB: SELECT nextval('Users_id_seq') AS id
11.10 12:20:35 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
11.10 12:20:35 -<<-: core/server.query ok
11.10 12:20:35 ->>-: core/user.register { password => test, name => test8, fullParams => { password => test, name => test8, networkid => , params => {obj: 1}, networktype => , messageType => user.register, id => 3 }, networkid => , connectionID => 84651052, networktype => , email => , id => 3, _type => core/user.register }
11.10 12:20:35 -<<-: core/user.register ok
11.10 12:20:35 -<<-: core/user.registerResponse null
11.10 12:20:35 == NET: null ret: user.register { type => user.register, errorCode => ok }
11.10 12:20:51 NET: Client (name:null conid:84651052 TCP) disconnected from ball.0 (clients:0)
