11.10 13:05:23 ->>-: core/server.login { host => 127.0.0.1, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 127.0.0.1, externalPort => 2010 }
11.10 13:05:23 -<<-: server.login ok
11.10 13:05:23 DB: SELECT * FROM LocalizationStrings
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 TIMER: Starting timer...
11.10 13:05:23 TIMER: Timer running...
11.10 13:05:23 DB: SELECT * FROM GameVars
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 13:05:23 -<<-: core/quest.getDaily ok
11.10 13:05:23 DB: SELECT * FROM UserAttributeTypes
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM UserVariableTypes
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 13:05:23 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM ItemGroups
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM Bundles ORDER BY ID
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 SHOP: loading items...
11.10 13:05:23 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 13:05:23 -<<-: core/shop.getList ok
11.10 13:05:23 SHOP: 0 items loaded (0 sec)
11.10 13:05:23 DB: SELECT * FROM EffectAttributeTypes
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT * FROM Effects
11.10 13:05:23 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 13:05:23 -<<-: core/server.query ok
11.10 13:05:23 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoc11.10 13:06:22 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 13:06:22 -<<-: server.login ok
11.10 13:06:22 DB: SELECT * FROM LocalizationStrings
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 TIMER: Starting timer...
11.10 13:06:22 TIMER: Timer running...
11.10 13:06:22 DB: SELECT * FROM GameVars
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 13:06:22 -<<-: core/quest.getDaily ok
11.10 13:06:22 DB: SELECT * FROM UserAttributeTypes
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM UserVariableTypes
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 13:06:22 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM ItemGroups
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM Bundles ORDER BY ID
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 SHOP: loading items...
11.10 13:06:22 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 13:06:22 -<<-: core/shop.getList ok
11.10 13:06:22 SHOP: 0 items loaded (0 sec)
11.10 13:06:22 DB: SELECT * FROM EffectAttributeTypes
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM Effects
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 13:06:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 13:06:22 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:06:22 DB: SELECT * FROM Badges
11.10 13:06:22 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 13:06:22 -<<-: core/server.query ok
11.10 13:07:03 NET: Client (conid:35448459) connected to ball.0 (clients:1)
11.10 13:07:03 ++ NET: null req: user.register { password => test, name => , params => {obj: 1}, messageType => user.register }
11.10 13:07:31 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
11.10 13:07:31 -<<-: server.login ok
11.10 13:07:31 DB: SELECT * FROM LocalizationStrings
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 TIMER: Starting timer...
11.10 13:07:31 TIMER: Timer running...
11.10 13:07:31 DB: SELECT * FROM GameVars
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
11.10 13:07:31 -<<-: core/quest.getDaily ok
11.10 13:07:31 DB: SELECT * FROM UserAttributeTypes
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM UserVariableTypes
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
11.10 13:07:31 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM ItemGroups
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM Bundles ORDER BY ID
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM BundleItems ORDER BY ID
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 SHOP: loading items...
11.10 13:07:31 ->>-: core/shop.getList { _type => core/shop.getList }
11.10 13:07:31 -<<-: core/shop.getList ok
11.10 13:07:31 SHOP: 0 items loaded (0 sec)
11.10 13:07:31 DB: SELECT * FROM EffectAttributeTypes
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM Effects
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
11.10 13:07:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
11.10 13:07:31 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 DB: SELECT * FROM Badges
11.10 13:07:31 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
11.10 13:07:31 -<<-: core/server.query ok
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:07:31 TIMER: Check auto-disconnect...
11.10 13:07:31 STATS: ball.0 cache, locks:0
11.10 13:21:50 NET: Client (conid:33559169) connected to ball.0 (clients:1)
11.10 13:21:50 ++ NET: null req: user.login { password => , name => testname, messageType => user.login }
11.10 13:21:50 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E''
11.10 13:21:50 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E'', _type => core/server.query }
11.10 13:21:50 -<<-: core/server.query ok
11.10 13:21:50 STATS: ball.0 cache connection, 21 calls, total 0.0211751461029053 sec spent, avg 1.01 ms
11.10 13:21:50 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:22:31 TIMER: Check auto-disconnect...
11.10 13:22:31 STATS: ball.0 cache, locks:0
11.10 13:22:31 TIMER: Check auto-disconnect...
11.10 13:22:31 STATS: ball.0 cache, locks:0
11.10 13:23:41 NET: Client (name:null conid:33559169 TCP) disconnected from ball.0 (clients:0)
11.10 13:23:55 NET: Client (conid:62442192) connected to ball.0 (clients:1)
11.10 13:23:56 ++ NET: null req: user.login { password => , name => testname, messageType => user.login }
11.10 13:23:56 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E''
11.10 13:23:56 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E'', _type => core/server.query }
11.10 13:23:56 -<<-: core/server.query ok
11.10 13:23:56 STATS: ball.0 cache connection, 22 calls, total 0.0225150585174561 sec spent, avg 1.02 ms
11.10 13:23:56 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:24:31 TIMER: Check auto-disconnect...
11.10 13:24:31 STATS: ball.0 cache, locks:0
11.10 13:25:16 NET: Client (name:null conid:62442192 TCP) disconnected from ball.0 (clients:0)
11.10 13:25:31 TIMER: Check auto-disconnect...
11.10 13:25:31 STATS: ball.0 cache, locks:0
11.10 13:25:31 TIMER: Check auto-disconnect...
11.10 13:25:31 STATS: ball.0 cache, locks:0
11.10 13:25:31 TIMER: Check auto-disconnect...
11.10 13:25:31 STATS: ball.0 cache, locks:0
11.10 13:25:31 TIMER: Check auto-disconnect...
11.10 13:25:31 STATS: ball.0 cache, locks:0
11.10 13:25:31 TIMER: Check auto-disconnect...
11.10 13:25:31 STATS: ball.0 cache, locks:0
11.10 13:25:31 TIMER: Check auto-disconnect...
11.10 13:30:32 STATS: ball.0 cache, locks:0
11.10 13:31:31 TIMER: Check auto-disconnect...
11.10 13:31:32 STATS: ball.0 cache, locks:0
11.10 13:32:31 TIMER: Check auto-disconnect...
11.10 13:32:32 STATS: ball.0 cache, locks:0
11.10 13:33:20 NET: Client (conid:44462187) connected to ball.0 (clients:1)
11.10 13:33:20 ++ NET: null req: user.login { password => , name => testname, messageType => user.login }
11.10 13:33:20 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E''
11.10 13:33:20 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'testname' AND Password = E'', _type => core/server.query }
11.10 13:33:20 -<<-: core/server.query ok
11.10 13:33:20 STATS: ball.0 cache connection, 23 calls, total 0.0240139961242676 sec spent, avg 1.04 ms
11.10 13:33:20 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:33:30 NET: Client (name:null conid:44462187 TCP) disconnected from ball.0 (clients:0)
11.10 13:33:31 TIMER: Check auto-disconnect...
11.10 13:33:32 STATS: ball.0 cache, locks:0
11.10 13:34:31 TIMER: Check auto-disconnect...
11.10 13:34:32 STATS: ball.0 cache, locks:0
11.10 13:35:31 TIMER: Check auto-disconnect...
11.10 13:35:32 STATS: ball.0 cache, locks:0
11.10 13:36:31 TIMER: Check auto-disconnect...
11.10 13:36:32 STATS: ball.0 cache, locks:0
11.10 13:36:57 NET: Client (conid:29508487) connected to ball.0 (clients:1)
11.10 13:36:57 ++ NET: null req: user.login { password => , name => Jsd, messageType => user.login }
11.10 13:36:57 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Jsd' AND Password = E''
11.10 13:36:57 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Jsd' AND Password = E'', _type => core/server.query }
11.10 13:36:57 -<<-: core/server.query ok
11.10 13:36:57 STATS: ball.0 cache connection, 24 calls, total 0.0255720615386963 sec spent, avg 1.07 ms
11.10 13:36:57 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:37:29 NET: Client (name:null conid:29508487 TCP) disconnected from ball.0 (clients:0)
11.10 13:37:31 TIMER: Check auto-disconnect...
11.10 13:37:32 STATS: ball.0 cache, locks:0
11.10 13:38:31 TIMER: Check auto-disconnect...
11.10 13:38:32 STATS: ball.0 cache, locks:0
11.10 13:38:54 NET: Client (conid:71393447) connected to ball.0 (clients:1)
11.10 13:38:54 ++ NET: null req: user.login { password => , name => Jsd, messageType => user.login }
11.10 13:38:54 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Jsd' AND Password = E''
11.10 13:38:54 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Jsd' AND Password = E'', _type => core/server.query }
11.10 13:38:54 -<<-: core/server.query ok
11.10 13:38:54 STATS: ball.0 cache connection, 25 calls, total 0.0262851715087891 sec spent, avg 1.05 ms
11.10 13:38:54 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:39:31 TIMER: Check auto-disconnect...
11.10 13:39:32 STATS: ball.0 cache, locks:0
11.10 13:40:31 TIMER: Check auto-disconnect...
11.10 13:40:32 STATS: ball.0 cache, locks:0
11.10 13:41:23 NET: Client (name:null conid:71393447 TCP) disconnected from ball.0 (clients:0)
11.10 13:41:25 NET: Client (conid:78688300) connected to ball.0 (clients:1)
11.10 13:41:25 ++ NET: null req: user.login { password => , name => Jsd, messageType => user.login }
11.10 13:41:25 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Jsd' AND Password = E''
11.10 13:41:25 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'Jsd' AND Password = E'', _type => core/server.query }
11.10 13:41:25 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 13:41:25 STATS: ball.0 cache connection, 26 calls, total 0.0272071361541748 sec spent, avg 1.05 ms
11.10 13:41:25 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:41:31 TIMER: Check auto-disconnect...
11.10 13:41:32 STATS: ball.0 cache, locks:0
11.10 13:41:40 NET: Client (name:null conid:78688300 TCP) disconnected from ball.0 (clients:0)
11.10 13:41:42 NET: Client (conid:17076350) connected to ball.0 (clients:1)
11.10 13:41:42 ++ NET: null req: user.login { password => , name => , messageType => user.login }
11.10 13:41:55 NET: Client (name:null conid:17076350 TCP) disconnected from ball.0 (clients:0)
11.10 13:42:31 TIMER: Check auto-disconnect...
11.10 13:42:32 STATS: ball.0 cache, locks:0
11.10 13:43:31 TIMER: Check auto-disconnect...
11.10 13:43:32 STATS: ball.0 cache, locks:0
11.10 13:44:31 TIMER: Check auto-disconnect...
11.10 13:44:32 STATS: ball.0 cache, locks:0
11.10 13:45:31 TIMER: Check auto-disconnect...
11.10 13:45:32 STATS: ball.0 cache, locks:0
11.10 13:46:31 TIMER: Check auto-disconnect...
11.10 13:46:32 STATS: ball.0 cache, locks:0
11.10 13:47:31 TIMER: Check auto-disconnect...
11.10 13:47:32 STATS: ball.0 cache, locks:0
11.10 13:48:31 TIMER: Check auto-disconnect...
11.10 13:48:32 STATS: ball.0 cache, locks:0
11.10 13:49:31 TIMER: Check auto-disconnect...
11.10 13:49:32 STATS: ball.0 cache, locks:0
11.10 13:50:31 TIMER: Check auto-disconnect...
11.10 13:50:32 STATS: ball.0 cache, locks:0
11.10 13:51:31 TIMER: Check auto-disconnect...
11.10 13:51:32 STATS: ball.0 cache, locks:0
11.10 13:52:31 TIMER: Check auto-disconnect...
11.10 13:52:32 STATS: ball.0 cache, locks:0
11.10 13:53:31 TIMER: Check auto-disconnect...
11.10 13:53:32 STATS: ball.0 cache, locks:0
11.10 13:54:31 TIMER: Check auto-disconnect...
11.10 13:54:32 STATS: ball.0 cache, locks:0
11.10 13:55:31 TIMER: Check auto-disconnect...
11.10 13:55:32 STATS: ball.0 cache, locks:0
11.10 13:56:31 TIMER: Check auto-disconnect...
11.10 13:56:32 STATS: ball.0 cache, locks:0
11.10 13:57:31 TIMER: Check auto-disconnect...
11.10 13:57:32 STATS: ball.0 cache, locks:0
11.10 13:57:51 NET: Client (conid:39187579) connected to ball.0 (clients:1)
11.10 13:57:51 ++ NET: null req: user.login { password => blooperson, name => И, messageType => user.login }
11.10 13:57:51 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'И' AND Password = E'blooperson'
11.10 13:57:51 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'И' AND Password = E'blooperson', _type => core/server.query }
11.10 13:57:51 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 13:57:51 STATS: ball.0 cache connection, 27 calls, total 0.0278031826019287 sec spent, avg 1.03 ms
11.10 13:57:51 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:57:52 NET: Client (name:null conid:39187579 TCP) disconnected from ball.0 (clients:0)
11.10 13:57:54 NET: Client (conid:48900455) connected to ball.0 (clients:1)
11.10 13:57:55 ++ NET: null req: user.login { password => blooperson, name => И, messageType => user.login }
11.10 13:57:55 DB: SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'И' AND Password = E'blooperson'
11.10 13:57:55 ->>-: core/server.query { q => SELECT ID, Name, NetworkID, IsBanned FROM Users WHERE Name = E'И' AND Password = E'blooperson', _type => core/server.query }
11.10 13:57:55 -<<-: core/server.query { list => {}, errorCode => ok, _type => core/server.query }
11.10 13:57:55 == NET: null ret: user.login { type => user.login, errorCode => userNotFound }
11.10 13:58:00 NET: Client (name:null conid:48900455 TCP) disconnected from ball.0 (clients:0)
11.10 13:58:31 TIMER: Check auto-disconnect...
11.10 13:58:32 STATS: ball.0 cache, locks:0
11.10 13:59:31 TIMER: Check auto-disconnect...
11.10 13:59:32 STATS: ball.0 cache, locks:0
