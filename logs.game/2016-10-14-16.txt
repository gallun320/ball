14.10 16:23:39 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:23:39 -<<-: server.login ok
14.10 16:23:39 DB: SELECT * FROM LocalizationStrings
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 TIMER: Starting timer...
14.10 16:23:39 TIMER: Timer running...
14.10 16:23:39 DB: SELECT * FROM GameVars
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:23:39 -<<-: core/quest.getDaily ok
14.10 16:23:39 DB: SELECT * FROM UserAttributeTypes
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM UserVariableTypes
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:23:39 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM ItemGroups
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 SHOP: loading items...
14.10 16:23:39 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:23:39 -<<-: core/shop.getList ok
14.10 16:23:39 SHOP: 0 items loaded (0 sec)
14.10 16:23:39 DB: SELECT * FROM EffectAttributeTypes
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM Effects
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:23:39 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:23:39 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 DB: SELECT * FROM Badges
14.10 16:23:39 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:23:39 -<<-: core/server.query ok
14.10 16:23:39 TIMER: Check auto-disconnect...
14.10 16:23:39 STATS: ball.0 cache, locks:0
14.10 16:23:39 TIMER: Check auto-disconnect...
14.10 16:23:39 STATS: ball.0 cache, locks:0
14.10 16:23:39 TIMER: Check auto-disconnect...
14.10 16:23:39 STATS: ball.0 cache, locks:0
14.10 16:23:39 TIMER: Check auto-disconnect...
14.10 16:23:39 STATS: ball.0 cache, locks:0
14.10 16:23:39 TIMER: Check auto-disconnect...
14.10 16:23:39 STATS: ball.0 cache, locks:0
14.10 16:29:12 NET: Client (conid:3235154) connected to ball.0 (clients:1)
14.10 16:29:12 ++ NET: null req: user.register { password => test, name => test1, messageType => user.register }
14.10 16:29:12 DB: SELECT ID FROM Users WHERE Name = E'test1'
14.10 16:29:12 ->>-: core/server.query { q => SELECT ID FROM Users WHERE Name = E'test1', _type => core/server.query }
14.10 16:29:12 -<<-: core/server.query ok
14.10 16:29:12 STATS: ball.0 cache connection, 21 calls, total 0.399046659469604 sec spent, avg 19 ms
14.10 16:29:12 DB: SELECT nextval('Users_id_seq') AS id
14.10 16:29:12 ->>-: core/server.query { q => SELECT nextval('Users_id_seq') AS id, _type => core/server.query }
14.10 16:29:12 -<<-: core/server.query ok
14.10 16:29:12 ->>-: core/user.register { password => test, name => test1, fullParams => { password => test, name => test1, networkid => , networktype => , messageType => user.register, id => 2 }, networkid => , connectionID => 3235154, networktype => , email => , id => 2, _type => core/user.register }
14.10 16:29:12 -<<-: core/user.register ok
14.10 16:29:12 -<<-: core/user.registerResponse null
14.10 16:29:12 == NET: null ret: user.register { type => user.register, errorCode => ok }
14.10 16:30:16 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:30:16 -<<-: server.login ok
14.10 16:30:16 DB: SELECT * FROM LocalizationStrings
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 TIMER: Starting timer...
14.10 16:30:16 TIMER: Timer running...
14.10 16:30:16 DB: SELECT * FROM GameVars
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:30:16 -<<-: core/quest.getDaily ok
14.10 16:30:16 DB: SELECT * FROM UserAttributeTypes
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM UserVariableTypes
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:30:16 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM ItemGroups
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 SHOP: loading items...
14.10 16:30:16 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:30:16 -<<-: core/shop.getList ok
14.10 16:30:16 SHOP: 0 items loaded (0 sec)
14.10 16:30:16 DB: SELECT * FROM EffectAttributeTypes
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM Effects
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:30:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:30:16 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:16 DB: SELECT * FROM Badges
14.10 16:30:16 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:30:16 -<<-: core/server.query ok
14.10 16:30:21 -<<-: battle.testEvent null
14.10 16:30:26 -<<-: battle.testEvent null
14.10 16:30:31 -<<-: battle.testEvent null
14.10 16:30:36 -<<-: battle.testEvent null
14.10 16:30:41 -<<-: battle.testEvent null
14.10 16:30:46 -<<-: battle.testEvent null
14.10 16:30:50 NET: Client (conid:65659521) connected to ball.0 (clients:1)
14.10 16:30:51 ++ NET: null req: user.login { messageType => user.login, token => dWlkMzQ= }
14.10 16:30:51 TRACE: Invalid field access : length
14.10 16:30:51 TRACE: 
Called from /usr/share/haxe/std/StringTools.hx line 229
Called from /usr/share/haxe/std/StringTools.hx line 253
Called from snipe/slave/modules/UserModuleCore.hx line 334
Called from snipe/slave/Server.hx line 887
Called from snipe/slave/Server.hx line 1124
14.10 16:30:51 TRACE: Could not login.
14.10 16:30:51 TRACE: 
Called from snipe/slave/Server.hx line 1151
Called from snipe/slave/MetaServer.hx line 530
Called from snipe/slave/ThreadServerModified.hx line 202
14.10 16:30:51 -<<-: battle.testEvent null
14.10 16:30:56 -<<-: battle.testEvent null
14.10 16:30:58 ++ NET: null req: tournament.getAvailableTournament { messageType => tournament.getAvailableTournament }
14.10 16:30:58 TRACE: User not logon yet.
14.10 16:31:01 -<<-: battle.testEvent null
14.10 16:31:06 -<<-: battle.testEvent null
14.10 16:31:11 -<<-: battle.testEvent null
14.10 16:31:27 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:31:27 -<<-: server.login ok
14.10 16:31:27 DB: SELECT * FROM LocalizationStrings
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 TIMER: Starting timer...
14.10 16:31:27 TIMER: Timer running...
14.10 16:31:27 DB: SELECT * FROM GameVars
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:31:27 -<<-: core/quest.getDaily ok
14.10 16:31:27 DB: SELECT * FROM UserAttributeTypes
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM UserVariableTypes
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:31:27 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM ItemGroups
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 SHOP: loading items...
14.10 16:31:27 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:31:27 -<<-: core/shop.getList ok
14.10 16:31:27 SHOP: 0 items loaded (0.002 sec)
14.10 16:31:27 DB: SELECT * FROM EffectAttributeTypes
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM Effects
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:31:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:31:27 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:27 DB: SELECT * FROM Badges
14.10 16:31:27 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:31:27 -<<-: core/server.query ok
14.10 16:31:32 -<<-: battle.testEvent null
14.10 16:31:37 -<<-: battle.testEvent null
14.10 16:31:42 -<<-: battle.testEvent null
14.10 16:31:58 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:31:58 -<<-: server.login ok
14.10 16:31:58 DB: SELECT * FROM LocalizationStrings
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 TIMER: Starting timer...
14.10 16:31:58 TIMER: Timer running...
14.10 16:31:58 DB: SELECT * FROM GameVars
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:31:58 -<<-: core/quest.getDaily ok
14.10 16:31:58 DB: SELECT * FROM UserAttributeTypes
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM UserVariableTypes
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:31:58 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM ItemGroups
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 SHOP: loading items...
14.10 16:31:58 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:31:58 -<<-: core/shop.getList ok
14.10 16:31:58 SHOP: 0 items loaded (0.002 sec)
14.10 16:31:58 DB: SELECT * FROM EffectAttributeTypes
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM Effects
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:31:58 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:31:58 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:31:58 DB: SELECT * FROM Badges
14.10 16:31:58 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:31:58 -<<-: core/server.query ok
14.10 16:32:03 -<<-: battle.testEvent null
14.10 16:32:08 -<<-: battle.testEvent null
14.10 16:32:13 -<<-: battle.testEvent null
14.10 16:32:18 -<<-: battle.testEvent null
14.10 16:32:23 -<<-: battle.testEvent null
14.10 16:32:28 -<<-: battle.testEvent null
14.10 16:32:33 -<<-: battle.testEvent null
14.10 16:32:56 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:32:56 -<<-: server.login ok
14.10 16:32:56 DB: SELECT * FROM LocalizationStrings
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 TIMER: Starting timer...
14.10 16:32:56 TIMER: Timer running...
14.10 16:32:56 DB: SELECT * FROM GameVars
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:32:56 -<<-: core/quest.getDaily ok
14.10 16:32:56 DB: SELECT * FROM UserAttributeTypes
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM UserVariableTypes
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:32:56 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM ItemGroups
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 SHOP: loading items...
14.10 16:32:56 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:32:56 -<<-: core/shop.getList ok
14.10 16:32:56 SHOP: 0 items loaded (0.002 sec)
14.10 16:32:56 DB: SELECT * FROM EffectAttributeTypes
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM Effects
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:32:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:32:56 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:32:56 DB: SELECT * FROM Badges
14.10 16:32:56 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:32:56 -<<-: core/server.query ok
14.10 16:33:01 -<<-: battle.testEvent null
14.10 16:33:06 -<<-: battle.testEvent null
14.10 16:33:11 -<<-: battle.testEvent null
14.10 16:33:16 -<<-: battle.testEvent null
14.10 16:33:21 -<<-: battle.testEvent null
14.10 16:33:26 -<<-: battle.testEvent null
14.10 16:33:31 -<<-: battle.testEvent null
14.10 16:33:36 -<<-: battle.testEvent null
14.10 16:33:41 -<<-: battle.testEvent null
14.10 16:33:46 -<<-: battle.testEvent null
14.10 16:33:51 -<<-: battle.testEvent null
14.10 16:33:56 -<<-: battle.testEvent null
14.10 16:33:56 TIMER: Check auto-disconnect...
14.10 16:33:56 STATS: ball.0 cache, locks:0
14.10 16:34:01 -<<-: battle.testEvent null
14.10 16:34:20 ->>-: core/server.login { host => 172.16.35.23, name => ball.0, port => 2010, type => game, _type => core/server.login, externalHost => 172.16.35.23, externalPort => 2010 }
14.10 16:34:20 -<<-: server.login ok
14.10 16:34:20 DB: SELECT * FROM LocalizationStrings
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM LocalizationStrings, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 TIMER: Starting timer...
14.10 16:34:20 TIMER: Timer running...
14.10 16:34:20 DB: SELECT * FROM GameVars
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM GameVars, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM QuestParameterTypes ORDER BY ID
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM QuestParameterTypes ORDER BY ID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM QuestConditionTypes ORDER BY ID
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM QuestConditionTypes ORDER BY ID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM QuestChains WHERE IsEnabled = 't'
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM QuestChains WHERE IsEnabled = 't', _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f')
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM Quests WHERE ChainID NOT IN (SELECT ID FROM QuestChains WHERE IsEnabled = 'f'), _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 ->>-: core/quest.getDaily { _type => core/quest.getDaily }
14.10 16:34:20 -<<-: core/quest.getDaily ok
14.10 16:34:20 DB: SELECT * FROM UserAttributeTypes
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM UserAttributeTypes, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM UserVariableTypes
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM UserVariableTypes, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID
14.10 16:34:20 ->>-: core/server.query { q => SELECT i.ID, i.GroupID, i.StringID, i.Name, i.Note, i.Params, i.TypeID, it.StringID AS Type, it.SlotID AS SlotID, ig.Name AS Group FROM Items AS i JOIN ItemTypes AS it ON i.TypeID = it.ID JOIN ItemGroups AS ig ON i.GroupID = ig.ID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM ItemGroups
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM ItemGroups, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM Bundles ORDER BY ID
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM Bundles ORDER BY ID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM BundleItems ORDER BY ID
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM BundleItems ORDER BY ID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 SHOP: loading items...
14.10 16:34:20 ->>-: core/shop.getList { _type => core/shop.getList }
14.10 16:34:20 -<<-: core/shop.getList ok
14.10 16:34:20 SHOP: 0 items loaded (0 sec)
14.10 16:34:20 DB: SELECT * FROM EffectAttributeTypes
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM EffectAttributeTypes, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM Effects
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM Effects, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID
14.10 16:34:20 ->>-: core/server.query { q => SELECT *, date_part('epoch', DateStart) AS TimeStart, date_part('epoch', DateEnd) AS TimeEnd FROM CalendarEvents ORDER BY ID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID
14.10 16:34:20 ->>-: core/server.query { q => SELECT *, date_part('epoch', Date) AS TimeStart FROM CalendarEventStages ORDER BY EventID, StageID, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:20 DB: SELECT * FROM Badges
14.10 16:34:20 ->>-: core/server.query { q => SELECT * FROM Badges, _type => core/server.query }
14.10 16:34:20 -<<-: core/server.query ok
14.10 16:34:25 -<<-: battle.testEvent null
14.10 16:34:30 -<<-: battle.testEvent null
14.10 16:34:35 -<<-: battle.testEvent null
